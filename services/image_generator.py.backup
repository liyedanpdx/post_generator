from PIL import Image, ImageDraw, ImageFont
import os
import datetime

def get_image_size(image_path):
    """
    返回图片的尺寸
    
    参数:
        image_path: 图片文件的路径
        
    返回:
        (width, height): 图片宽度和高度的元组
    """
    try:
        with Image.open(image_path) as img:
            return img.size
    except Exception as e:
        print(f"获取图片尺寸时出错: {e}")
        return None

class ImageEditor:
    def __init__(self, image_path):
        """
        初始化图片编辑器
        
        参数:
            image_path: 图片文件的路径
        """
        try:
            # 打开图像并转换为RGBA模式
            self.img_path = image_path
            self.img = Image.open(image_path).convert('RGBA')
            self.width, self.height = self.img.size
            print(f"图片尺寸: {self.img.size}")
        except Exception as e:
            print(f"打开图片时出错: {e}")
            raise e
        
    def add_text(self, 
            text="TEST",
            position=(None, None),  # 如果为None，则居中
            right_align_x=None,     # 右对齐的X坐标，优先级高于position的x
            font_name="../assets/fonds/impact.ttf",
            font_size=100,
            text_color="white",
            rotation_angle=0):
        """
        在图片上添加旋转的文字
        
        参数:
            text: 要添加的文字
            position: (x, y)位置坐标，如果是None则居中
            right_align_x: 右对齐的X坐标，如果设置了这个值，文本会以这个点为右边界向左延伸
            font_name: 字体名称或路径
            font_size: 字体大小
            text_color: 文字颜色，可以是名称(如"white")或RGB元组(如(255,255,255))
            rotation_angle: 旋转角度（度数）
        
        返回:
            self: 返回对象本身，支持链式调用
        """
        try:
            # 尝试加载字体
            try:
                font = ImageFont.truetype(font_name, font_size)
                print(f"成功加载字体: {font_name}, 大小: {font_size}")
            except Exception as font_error:
                print(f"加载字体 {font_name} 失败: {font_error}")
                try:
                    # 如果找不到指定字体，尝试加载系统字体
                    import matplotlib.font_manager as fm
                    system_fonts = fm.findSystemFonts()
                    if system_fonts:
                        font = ImageFont.truetype(system_fonts[0], font_size)
                        print(f"使用系统字体: {system_fonts[0]}")
                    else:
                        font = ImageFont.load_default()
                        print("使用默认字体")
                except:
                    font = ImageFont.load_default()
                    print("使用默认字体")
            
            # 创建一个透明图层用于文字
            text_layer = Image.new('RGBA', self.img.size, (0, 0, 0, 0))
            text_draw = ImageDraw.Draw(text_layer)
            
            # 获取文本尺寸
            try:
                # 新版Pillow
                text_bbox = text_draw.textbbox((0, 0), text, font=font)
                text_width = text_bbox[2] - text_bbox[0]
                text_height = text_bbox[3] - text_bbox[1]
            except:
                # 旧版Pillow
                text_width, text_height = text_draw.textsize(text, font=font)
            
            # 确定文本位置
            x, y = position
            
            # 如果设置了右对齐，以右边界坐标减去文本宽度计算左侧起始位置
            if right_align_x is not None:
                x = right_align_x - text_width
            elif x is None:
                # 如果没有设置x坐标和右对齐，则居中
                x = (self.width - text_width) // 2
                
            if y is None:
                y = (self.height - text_height) // 2
            
            # 绘制文本到透明图层
            text_draw.text((x, y), text, fill=text_color, font=font)
            
            # 旋转文本图层
            # 注意：rotation_angle为负数表示顺时针旋转
            rotated_layer = text_layer.rotate(rotation_angle, resample=Image.BICUBIC, expand=False)
            
            # 合并图层
            self.img = Image.alpha_composite(self.img, rotated_layer)
            
            return self
            
        except Exception as e:
            print(f"添加文字时出错: {e}")
            import traceback
            traceback.print_exc()
            return self
    # def add_text(self, 
    #             text="测试文本",
    #             position=(None, None),  # 如果为None，则居中
    #             font_name="../assets/fonds/impact.ttf",
    #             font_size=100,
    #             text_color="white",
    #             rotation_angle=0):
    #     """
    #     在图片上添加旋转的文字
        
    #     参数:
    #         text: 要添加的文字
    #         position: (x, y)位置坐标，如果是None则居中
    #         font_name: 字体名称或路径
    #         font_size: 字体大小
    #         text_color: 文字颜色，可以是名称(如"white")或RGB元组(如(255,255,255))
    #         rotation_angle: 旋转角度（度数）
        
    #     返回:
    #         self: 返回对象本身，支持链式调用
    #     """
    #     try:
    #         # 尝试加载字体
    #         try:
    #             font = ImageFont.truetype(font_name, font_size)
    #             print(f"成功加载字体: {font_name}, 大小: {font_size}")
    #         except Exception as font_error:
    #             print(f"加载字体 {font_name} 失败: {font_error}")
    #             try:
    #                 # 如果找不到指定字体，尝试加载系统字体
    #                 import matplotlib.font_manager as fm
    #                 system_fonts = fm.findSystemFonts()
    #                 if system_fonts:
    #                     font = ImageFont.truetype(system_fonts[0], font_size)
    #                     print(f"使用系统字体: {system_fonts[0]}")
    #                 else:
    #                     font = ImageFont.load_default()
    #                     print("使用默认字体")
    #             except:
    #                 font = ImageFont.load_default()
    #                 print("使用默认字体")
            
    #         # 创建一个透明图层用于文字
    #         text_layer = Image.new('RGBA', self.img.size, (0, 0, 0, 0))
    #         text_draw = ImageDraw.Draw(text_layer)
            
    #         # 获取文本尺寸
    #         try:
    #             # 新版Pillow
    #             text_bbox = text_draw.textbbox((0, 0), text, font=font)
    #             text_width = text_bbox[2] - text_bbox[0]
    #             text_height = text_bbox[3] - text_bbox[1]
    #         except:
    #             # 旧版Pillow
    #             text_width, text_height = text_draw.textsize(text, font=font)
            
    #         # 确定文本位置
    #         x, y = position
    #         if x is None:
    #             x = (self.width - text_width) // 2
    #         if y is None:
    #             y = (self.height - text_height) // 2
            
    #         # 绘制文本到透明图层
    #         text_draw.text((x, y), text, fill=text_color, font=font)
            
    #         # 旋转文本图层
    #         # 注意：rotation_angle为负数表示顺时针旋转
    #         rotated_layer = text_layer.rotate(rotation_angle, resample=Image.BICUBIC, expand=False)
            
    #         # 合并图层
    #         self.img = Image.alpha_composite(self.img, rotated_layer)
            
    #         return self
            
    #     except Exception as e:
    #         print(f"添加文字时出错: {e}")
    #         import traceback
    #         traceback.print_exc()
    #         return self
    
    def save_image(self, output_path):
        """
        保存当前编辑的图片
        
        参数:
            output_path: 输出文件的路径
            
        返回:
            output_path: 如果成功，返回输出文件路径；否则返回None
        """
        try:
            # 创建输出目录（如果不存在）
            output_dir = os.path.dirname(output_path)
            if output_dir and not os.path.exists(output_dir):
                os.makedirs(output_dir, exist_ok=True)
            
            # 保存结果
            final_img = self.img.convert('RGB')  # 转为RGB模式保存
            final_img.save(output_path)
            print(f"图片已保存到: {output_path}")
            return output_path
            
        except Exception as e:
            print(f"保存图片时出错: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def get_current_image(self):
        """
        获取当前编辑的图片对象
        
        返回:
            Image: PIL图片对象
        """
        return self.img
    
    def show_image(self):
        """
        显示当前图片（用于调试）
        """
        self.img.show()
        return self
    
    def new_offer_post(self):
        """
        帮助生成new offer海报
        """

def generate_offer_poster(recipient_name, offer_amount, team_name,
                         team_name2 ="", 
                         banner_path="../assets/offer_banner.png", 
                         output_dir="../assets/output",
                         font_path="../assets/fonds/impact.ttf",
                         save_interim=False):
    """
    生成offer海报
    
    参数:
        recipient_name: 收件人姓名（如 "Cora Xia"）
        offer_amount: offer金额（如 "20,850"）
        team_name: 团队名称（如 "Niki/Vera"）
        banner_path: offer banner图片路径
        output_dir: 输出目录
        font_path: 字体文件路径
        save_interim: 是否保存中间结果
        
    返回:
        output_path: 生成的海报路径
    """
    try:
        # 确保输出目录存在
        if not os.path.exists(output_dir):
            os.makedirs(output_dir, exist_ok=True)
            
        # 获取当前日期
        current_date = datetime.datetime.now().strftime("%Y%m%d")
        
        # 处理金额格式（确保有$符号）
        if not offer_amount.startswith('$') and not offer_amount.startswith('￥'):
            offer_amount = f"${offer_amount}"
            
        # 创建图片编辑器
        editor = ImageEditor(banner_path)
        
        # 添加金额文字
        editor.add_text(
            text=offer_amount,
            position=(1200, 800),
            font_name=font_path,
            font_size=700,
            text_color="white",
            rotation_angle=-13
        )
        
        # 添加收件人姓名 - 使用右对齐功能，固定右侧边界
        editor.add_text(
            text=f"@{recipient_name}",
            position=(None, 650),  # 只使用y坐标
            right_align_x=3500,    # 右侧固定边界
            font_name=font_path,
            font_size=200,
            text_color="white",
            rotation_angle=-13
        )
                
        # 添加团队名称
        editor.add_text(
            text=f"FROM {team_name} Team!",
            position=(1100, 1600),
            font_name=font_path,
            font_size=170,
            text_color="white",
            rotation_angle=-13
        )
        if team_name2:
            editor.add_text(
                text=f"FROM {team_name2} Team!",
                position=(1100, 1800),
                font_name=font_path,
                font_size=170,
                text_color="white",
                rotation_angle=-13
            )
        # 生成不带特殊字符的文件名
        safe_recipient = recipient_name.replace(' ', '_').replace('/', '_')
        safe_amount = offer_amount.replace('$', '').replace(',', '').replace('.', '_')
        safe_team = team_name.replace('/', '_')
        
        # 保存中间结果（如果需要）
        if save_interim:
            interim_path = os.path.join(output_dir, f"interim_{safe_recipient}_{current_date}.png")
            editor.save_image(interim_path)
            print(f"中间结果已保存: {interim_path}")
        
        # 生成最终输出文件名
        output_filename = f"output_{safe_recipient}_{safe_amount}_{safe_team}_{current_date}.png"
        output_path = os.path.join(output_dir, output_filename)
        
        # 保存最终结果
        editor.save_image(output_path)
        
        return output_path
        
    except Exception as e:
        print(f"生成offer海报时出错: {e}")
        import traceback
        traceback.print_exc()
        return None


# 使用示例
if __name__ == "__main__":
    # # 获取图片尺寸
    # img_path = "../assets/offer_banner.png"
    # size = get_image_size(img_path)
    # print(f"图片尺寸: {size}")
    
    # # 创建图片编辑器
    # editor = ImageEditor(img_path)
    
    # # 添加多个文字
    # editor.add_text(
    #     text="$20,850",
    #     position=(1200, 800),
    #     font_name="../assets/fonds/impact.ttf",
    #     font_size=650,
    #     text_color="white",
    #     rotation_angle=-13
    # )
    # editor.add_text(
    #     text="@Cora Xia",
    #     position=(2500, 650),
    #     font_name="../assets/fonds/impact.ttf",
    #     font_size=220,
    #     text_color="white",
    #     rotation_angle=-13
    # )
    # editor.add_text(
    #     text="FROM Niki/Vera Team!",
    #     position=(1100, 1500),
    #     font_name="../assets/fonds/impact.ttf",
    #     font_size=180,
    #     text_color="white",
    #     rotation_angle=-13
    # )
    # # 可以在中间保存查看效果
    # editor.save_image("../assets/output_interim.png")
    
    # # 在自定义位置添加倾斜的彩色文字
    # add_text_to_image(
    #     image_path=img_path,
    #     output_path="../assets/output_custom.png",
    #     font_name="../assets/fonds/impact.ttf",
    #     text="TEST",
    #     position=(1500, 800),  # 自定义位置
    #     font_size=200,
    #     text_color= "white",#"#FF9900",  # 橙色
    #     rotation_angle=-13  # 12度倾斜
    # )
    
    # 简单调用，只需提供三个必要参数
    # poster_path = generate_offer_poster(
    #     recipient_name="Sally Ma; Cindy Yang", 
    #     offer_amount="5,030", 
    #     team_name="Sally/Vera"
    # )
    
    # poster_path = generate_offer_poster(
    #     recipient_name="Logan Zhang", 
    #     offer_amount="6,380", 
    #     team_name="Betty"
    # )
    # poster_path = generate_offer_poster(
    #     recipient_name="Fannie Dai", 
    #     offer_amount="4,105", 
    #     team_name="Erica/Joy"
    # )
    # poster_path = generate_offer_poster(
    #     recipient_name="Lily Lee", 
    #     offer_amount="11,915", 
    #     team_name="Blair"
    # )
    poster_path = generate_offer_poster(
        recipient_name="Hannah Ge; Michael Sun", 
        offer_amount="34,320", 
        team_name="Digital Solutions Service",
        team_name2="Vee/Vera"
    )
    print(f"海报已生成: {poster_path}")